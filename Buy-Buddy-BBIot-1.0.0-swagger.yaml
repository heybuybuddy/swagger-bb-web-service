openapi: 3.0.0
servers:
  - url: 'https://api-legacy.buybuddy.co/api/v1'
info:
  description: |
    # Introduction
    ## What is Buy Buddy Platform?
    Buy Buddy is a multi-purpose retail efficiency platform.
 
    ## Who is Buy Buddy Platform for?
    Buy Buddy platform is available for any retailers who are in search for a new way of optimizing their in store activities and offering a new and technological way of shopping to their customers.
    # Authentication
    The data of the users and its availability to the particular access groups carries significance, which is the main reason why authentication layer is required.
    Therefore, in order to perform certain actions, users are required to be authenticated to our platform services.
    Once the authentication layer identifies the user associated with requests to the platform API, the authorization layer uses information about the requesting user to determine if the request should be allowed.
    ## Artifacts
    ### Credentials
    The credentials artifact is a form of "username" and a matching "password" which identifies the user.
    It is required as the first step of authenticating to the platform.
    Submission of credentials to the platform will grant a passphrase in return for further interaction with the system.
    ### Passphrase
    This artifact provides an ability to grant access on the server.
    The passphrase is assigned after the initial submission of the user credentials.
    It has a long expiration duration of six months and it could be stored on a device, possibly using secure persistence mechanisms (i.e. keychain).
    A valid passphrase will be adequate to grant access to a user.
    ### JSON Web Token (RFC 7519)
    Contains user data signed off by the platform authority, which provides stateless authentication.
    In many circumstances, the payload of this artifact could be read by client application, but not mutated.
    In case of mutation, it will invalidate itself, since signature is no longer valid.
    It has a valid duration of 15 minutes, after the duration has passed, it will invalidate itself.
    #### Renewal
    The JSON Web Token (JWT) will be renewed automatically after its duration ends if a valid passphrase is available. In case of both the passphrase and JWT are unavailable the user will have to authenticate using their credentials once more and obtain a new passphrase and use it to retrieve a new JWT.
    # Authorization
    Authorization policies determine whether a user is allowed to perform a given action within the platform. This allows platform administrators to use the existing policies to control who has various access levels to the platform itself. Note that authorization is a separate step from authentication, which is more about determining the identity of who is taking the action.
    ## Authorization Management
    Managing authorization and permissions per user can be a difficult job when a lot of users are involved. Incorrect management of permissions can block users from accessing required sources or even worse grant access to unauthorized users to restricted areas and perform harmful operations. Therefore authorization management is an important job and should be handled cautiously. On our platform, authorization is managed through permissions sets and permission grants. By granting permission sets to certain users, they are enabled to perform certain actions allowed by the permission set. Users can be granted more than one permission set and permission sets may override each other.
    ### Permissions
    Together with authentication, permissions are used to determine whether a request from a certain user should be granted or denied access. Permissions specify exactly which resources or actions can be accessed by that particular user. A permission is the simplest element of authorization.
    #### Permission Sets
    Permission sets, to simply put, are a set of permissions that is used to grant additional access to one or more users. You can use permission sets to grant access. To deny access one would simply not grant that certain set of permissions.
    ### Retrieval
    Permissions are granted through permission set grants. Once granted they usually are available for certain periods of time. They can be set to be available after a certain date. The grant would have to be invalidated to revoke the access for that particular user.
    ### Policies
    Policies are definitions for the permissions. More specifically, permissions define which parts of the platform can be accessed via that permission while policies will define the action a user can perform after receiving the permission.
    ### Rate Limiting
    Rate limiting is necessary for controlling the rate and number of requests received from an external network. We apply rate limiting on our platform to prevent DoS attacks. Rate limiting is applied to each user separately. To describe more accurately, it is applied to each users access token.
    # Webhook Signatures (HMACs)
    When data is sent to external services from the Buy Buddy API(e.g. when a webhook is triggered by an event), the payload will be authenticated with a [hash-based message authentication code (HMAC)](https://en.wikipedia.org/wiki/HMAC).
    THe HMAC is created using a key which is a shared secret, and you verify it by running the algorithm yourself with the payload and the key to re-create the HMAC.
    This verifies that the sender of the message knows the secret key.
    ## Secret Key
    You can generate your keys through the developers portal on the Buy Buddy Dashboard. Your keys will remain visible on the dashboard in case you ever loose it.
    In you suspect that the key might have been compromised, you can revoke it and generate a new key through the dashboard.
    ## Algorithm
    The HMAC is created using the HMAC_SHA256 algorithm and then encoded in base 64.
    The HMAC is placed in to the request in the x-buybuddy-signature header.
    ```
    request.Header{"x-buybuddy-signature":  base64Encode(computeHmac256(requestBody, secretKey))}
    ```
    ## Verification
    Verification of a HMAC-SHA256-value is pretty straightforward. Any crypto library in your preferred language would suffice.
    ### JS/Node example:
    ```
    const CryptoJS = require('crypto-js');

    function verifyHmac(
      receivedHmac, // received in the x-buybuddy-signature request header
      dataString, // received in request body (stringified JSON)
      secret // shared secret, known by your service
    ) {
        const generatedHmac = CryptoJS.HmacSHA256(dataString, secret);
        const generatedHmacBase64 = CryptoJS.enc.Base64.stringify(generatedHmac);

        return generatedHmacBase64 === receivedHmac;
    }

    // test the function
    const receivedHmac = "sldmlASSLKmdlska1Slsdmkslsdlksdmk3s=";
    const dataString = '{"foo":1,"bar":2}';
    const key = "examplekey";

    if (!verifyHmac(receivedHmac, dataString, key)) {
        throw new Error("HMAC did not authenticate");
    }
    ```
    # Errors
    Buy Buddy API uses conventional HTTP response codes to indicate the success or failure of an API request. In general; Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the 5xx range indicate an error with Stripe's servers (these are rare).
    <!-- ReDoc-Inject: <security-definitions> -->
  version: 1.0.0
  title: Buy Buddy Web Services
  contact:
    email: emir@buybuddy.co
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /webhook/subscribe:
    post:
      tags:
        - Webhook
      summary: Create webhook
      description: |
        Create a webhook to subscribe to certain events.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                callback_url:   # Callback URL
                  type: string
                  format: uri
                  example: https://myserver.com/send/callback/here
                enabled_events:
                  type: string
                  enum:
                    - interaction
                    - security
                  example: [interaction, security]
              required:
                - callbackUrl
      callbacks:   # Callback definition
        interactionEvent:   # Event name
          '{$request.body#/callbackUrl}':   # The callback URL,
                                            # Refers to the passed URL
            post:
              requestBody:   # Contents of the callback message
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/EventCallBackResponse'
              responses:   # Expected responses to the callback message
                200:
                  description: Your server returns this code if it accepts the callback
      responses:
        201:
          description: Webhook created
  /user/sign_in/token : 
    post: 
      tags:
        - Token
      summary: Create json web token
      operationId: token
      description: Create a json web token using the passphrase provided on the dashboard.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                passphrase: 
                  type: integer
                user_id: 
                  type: integer
        description: passphrase and user_id
      responses: 
        201: 
          description: result of the item assignment
          content: 
            application/json: 
              schema: 
                type: object
                properties:
                  token:
                    type: string
                example: 
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo0NiwiZXhwIjoxNTgxNjA4MTAzLCJpYXQiOjE1ODE2MDA5MDN9.eZs3gHqD6BRK0n458-Vgww8fRanlUvdxriLSkqqz9zQ
        400: 
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
  /category:
    get:
      tags:
        - Category
      summary: Get categories
      operationId: merchantCategory
      description: |
        Fetch a list containing all of the categories.
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    items:
                      $ref: '#/components/schemas/Category'
              
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /tag:
    get:
      tags:
        - Tag
      summary: Get tags
      operationId: merchantTag
      description: |
        Fetch a list containing all of the tags.
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    items:
                      $ref: '#/components/schemas/Tag'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /zone:
    get:
      tags:
        - Zone
      summary: Get zones
      operationId: merchantZone
      description: |
        Fetch a list containing all of the places.
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    items:
                      $ref: '#/components/schemas/Zone'
        400:
         $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /place:
    get:
      tags:
        - Place
      summary: Get places
      operationId: merchantPlace
      description: |
        Fetch a list containing all of the places.
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    items:
                      $ref: '#/components/schemas/Place'
        400:
         $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /item:
    get:
      tags:
        - Item
      summary: Get items
      operationId: merchantItem
      description: |
        Fetch a list containing all of the items. Add barcodes as query parameters to fetch specific items.
      parameters:
        - $ref: '#/components/parameters/ItemBarcode'
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    items:
                      $ref: '#/components/schemas/Item'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /brand:
    get:
      tags:
        - Brand
      summary: Get brands
      operationId: merchantBrand
      description: |
        Fetch a list containing all of the brands.
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    items:
                      $ref: '#/components/schemas/Brand'
        400:
         $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /retail_action:
    get:
      tags:
        - Retail Action
      summary: Get retail action
      operationId: merchantRetailAction
      description: |
        You can fetch all item related retail action information for your merchant by passing in your hardware type, aggregation functions, time filters, sorting options, limiting options and combination options. Some query filters are not applyible to every event. 
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/RetailEvent'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/GroupBy'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RetailResponse'
                  - $ref: '#/components/schemas/ZoneResponse'
                  - $ref: '#/components/schemas/CategoryResponse'
                  - $ref: '#/components/schemas/BrandResponse'
                  - $ref: '#/components/schemas/TagResponse'
                  - $ref: '#/components/schemas/UserResponse'
                  - $ref: '#/components/schemas/PlaceResponse'
        400:
         $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /hardware/status:
    get:
      tags:
        - Hardware Status
      summary: Get hardware status
      operationId: merchantHardwareStatus
      description: |
        You can fetch all hardware status related information for your merchant by passing in your hardware type, aggregation functions, time filters, sorting options, limiting options and combination options. Some query filters are not applyible to every event. 
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/HardwareEvent'
        - $ref: '#/components/parameters/HardwareStatusEvent'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/GroupBy'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/HardwareStatusResponse'
                  - $ref: '#/components/schemas/ZoneResponse'
                  - $ref: '#/components/schemas/CategoryResponse'
                  - $ref: '#/components/schemas/BrandResponse'
                  - $ref: '#/components/schemas/TagResponse'
                  - $ref: '#/components/schemas/UserResponse'
                  - $ref: '#/components/schemas/PlaceResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /insight:
    get:
      tags:
        - Insight
      summary: Get insights
      operationId: merchantInsight
      description: |
        You can fetch all item related business insight calculations for your merchant by passing in your insight type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/InsightType'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/GroupBy'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InsightResponse'
                  - $ref: '#/components/schemas/ZoneResponse'
                  - $ref: '#/components/schemas/CategoryResponse'
                  - $ref: '#/components/schemas/BrandResponse'
                  - $ref: '#/components/schemas/TagResponse'
                  - $ref: '#/components/schemas/UserResponse'
                  - $ref: '#/components/schemas/PlaceResponse'
        400:
         $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /security:
    get:
      tags:
        - Security Event
      summary: Get security events
      operationId: merchantSecurity
      description: |
        You can fetch all item related security events for your merchant by passing in your event type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/SecurityEvent'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/GroupBy'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SecurityResponse'
                  - $ref: '#/components/schemas/ZoneResponse'
                  - $ref: '#/components/schemas/CategoryResponse'
                  - $ref: '#/components/schemas/BrandResponse'
                  - $ref: '#/components/schemas/TagResponse'
                  - $ref: '#/components/schemas/UserResponse'
                  - $ref: '#/components/schemas/PlaceResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /interaction:
    get:
      tags:
        - Interaction Event
      summary: Get interaction events
      operationId: merchantInteraction
      description: |
        You can fetch all interactions events for your merchant by passing in your event type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/InteractionEvent'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/GroupBy'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InteractionResponse'
                  - $ref: '#/components/schemas/ItemResponse'
                  - $ref: '#/components/schemas/ZoneResponse'
                  - $ref: '#/components/schemas/CategoryResponse'
                  - $ref: '#/components/schemas/BrandResponse'
                  - $ref: '#/components/schemas/TagResponse'
                  - $ref: '#/components/schemas/UserResponse'
                  - $ref: '#/components/schemas/PlaceResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /stock:
    get:
      tags:
        - Stock
      summary: Get stock
      operationId: merchantStock
      description: |
        You can fetch all stock related information for items in your merchant by passing in your event type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/StockEvent'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/GroupBy'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ItemResponse'
                  - $ref: '#/components/schemas/ZoneResponse'
                  - $ref: '#/components/schemas/CategoryResponse'
                  - $ref: '#/components/schemas/BrandResponse'
                  - $ref: '#/components/schemas/TagResponse'
                  - $ref: '#/components/schemas/UserResponse'
                  - $ref: '#/components/schemas/PlaceResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /hardware:
    get:
      tags:
        - Hardware
      summary: Get hardware
      operationId: merchantHardware
      description: |
        You can fetch all hardware related information for your merchant by passing in your hardware type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/HardwareEvent'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/GroupBy'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    type: object
                    properties:
                      hardware:
                        items:
                          $ref: '#/components/schemas/Hardware'
                      total_aggregation_calculation:
                        type: integer
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Unauthorized'
                
components:
  responses:
    BadRequest:
      description: The request was unacceptable.
      content:
        application/json:
          schema:
              $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: No valid API key provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: The API key doesn't have permissions to perform the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    Limit:
      in: query
      name: limit
      description: Specify the number of records to return.
      schema:
        type: integer
    Sort:
      in: query
      name: sort
      schema:
        type: string
        enum: [asc, desc]
      description: >
        Sort order:
            * `asc` - Ascending, from A to Z
            * `desc` - Descending, from Z to A
    AggregationFunction:
      in: query
      name: aggregation_function
      description: The types of aggregate functions you want to use on the result you are fetching. For example passing in sum would bring you the total value of the resource you want to fetch.
      schema:
        type: string
        enum:
          - sum
          - count
          - min
          - max
          - average
          - median
    RetailEvent:
      in: query
      name: event_type
      description: The types of item retail event calculations you want to fetch.
      schema:
        type: string
        enum:
          - silence_alarm
          - pair_item
          - unpair_item
          - find
          - set
          - transfer
          - assign
          - ring
    InteractionEvent:
      in: query
      name: event_type
      description: The types of user item engagements you want to fetch.
      schema:
        type: string
        enum:
          - picked_up
          - bounce
          - browsing
          - walking
          - abandoned
    ItemBarcode:
      in: query
      name: item_barcode
      description: Specify the barcode of items to fetch.
      schema:
        type: string
    StartDate:
      in: query
      name: start_date
      description: The start date of the time frame you want to search your values inbtween.
      schema:
        type: string
      required: false 
    EndDate:
      in: query
      name: end_date
      description: The end date of the time frame you want to search your values inbetween.
      schema:
        type: string
      required: false 
    PlaceID:
      in: query
      name: place_id
      description: The place id's of place objects to customize your query
      schema:
        type: array
        items:
          type: integer
      required: false 
    CategoryID:
      in: query
      name: category_id
      description: The category id's of item objects to customize your query
      schema:
        type: array
        items:
          type: integer
      required: false 
    TagID:
      in: query
      name: tag_id
      description: The tag id's of tag objects to customize your query
      schema:
        type: array
        items:
          type: integer
      required: false 
    ItemID:
      in: query
      name: item_id
      description: The item id's of the item objects to customize your query
      schema:
        type: array
        items:
          type: integer
      required: false 
    StoreID:
      in: query
      name: store_id
      schema:
        type: array
        items:
          type: integer
      required: false 
    ZoneID:
      in: query
      name: zone_id
      description: The zone id's of zone objects to customize your query
      schema:
        type: array
        items:
          type: integer
      required: false 
    BrandID:
      in: query
      name: brand_id
      description: The brand id's of brand objects to customize your query
      schema:
        type: array
        items:
          type: integer
      required: false 
    UserID:
      in: query
      name: user_id
      description: The user id's of the user objects to customize your query
      schema:
        type: array
        items:
          type: integer
      required: false 
    GroupBy:
      in: query
      name: group_by
      schema:
        type: string
        enum:
          - zone
          - item
          - brand
          - category
          - place
          - user
          - tag
    InsightType:
      in: query
      name: event_type
      description: >
        Insight type:
            * `conversion` - picked up's divided by sales
            * `cart_sale` - added to cart divided by sales
            * `cart_rate` - picked up's divided by add to cart's
            * `stock_out` - Stock out rate calculation
            * `interaction_rate` - Time interacted with items
            * `stock_out_response` - Reaction time of employees to stock out
            * `alarm_response` - Reaction time of employees to alarms
      schema:
        type: string
        enum:
          - conversion
          - cart_sale
          - cart_rate
          - stock_out
          - interaction_rate
          - stock_out_response
          - alarm_response
    SecurityEvent:
      in: query
      name: event_type
      description: The types of item security events you want to fetch.
      schema:
        type: string
        enum:
          - active
          - deactive
          - alarming
          - alarmed
          - missing
    StockEvent:
      in: query
      name: event_type
      description: The types of item stock events you want to fetch.
      schema:
        type: string
        enum:
          - stock
          - stock_out
          - min_stock
    HardwareEvent:
      in: query
      name: hardware_type
      description: The types of hardware you want to fetch.
      schema:
        type: string
        enum:
          - tag
          - scanner
    HardwareStatusEvent:
      in: query
      name: hardware_status
      description: The types of hardware states you want to fetch.
      schema:
        type: string
        enum:
          - in_production
          - ready_to_use
          - ready_to_assign
          - assigned
          - in_use
          - maintenance
          - low_battery
          - end_of_life
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        inserted_at:
          type: string
        updated_at:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        inserted_at:
          type: string
        updated_at:
          type: string
    Zone:
      type: object
      properties:
        id:
          type: integer
        store_id:
          type: integer
        name:
          type: string
        inserted_at:
          type: string
        updated_at:
          type: string
    Place:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        name:
          type: string
        type:
          type: string
        inserted_at:
          type: string
        updated_at:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        upc:
          type: string
        sku:
          type: string
        metadata:
          type: string
        brand_id:
          type: integer
        inserted_at:
          type: string
        updated_at:
          type: string
    Brand:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        inserted_at:
          type: string
        updated_at:
          type: string
    Interaction:
      type: object
      properties:
        upc: 
          type: string
        name: 
          type: string
        meta_data:
          type: object
          properties:
            image_url:
              type: string
        rank: 
          type: integer
        interaction_event:
          type: string
    Insight:
      type: object
      properties:
        name:
          type: string
        upc: 
          type: string
        meta_data:
          type: object
          properties:
            image_url:
              type: string
        event:
          type: string
    Security:
      type: object
      properties:
        item:
          type: object
          properties:
            upc: 
              type: string
            name: 
              type: string
        device:
          type: object
          properties:
            identifier:
              type: string
            type: 
              type: string
        user_id:
          type: integer
        event: 
          type: string
    Stock:
      type: object
      properties:
        item:
          type: object
          properties:
            upc: 
              type: string
            name: 
              type: string
            aggregation_calculation:
              type: integer
            
    RetailAction:
      type: object
      properties:
        item:
          type: object
          properties:
            upc: 
              type: string
            name: 
              type: string
        device:
          type: object
          properties:
            identifier:
              type: string
            type: 
              type: string
        user_id:
          type: integer
        action:
          type: string
    Hardware:
      type: object
      properties:
      
         device:
          type: object
          properties:
            identifier:
              type: string
            type: 
              type: string
            status:
              type: string
    PlacePartition:
      type: object
      properties:
        name:
          type: string
        aggregation_calculation:
          type: integer
    UserPartition:
      type: object
      properties:
        id:
          type: string
        aggregation_calculation:
          type: integer
    TagPartition:
      type: object
      properties:
        name:
          type: string
        aggregation_calculation:
          type: integer
    ZonePartition:
      type: object
      properties:
        name:
          type: string
        aggregation_calculation:
          type: integer
    CategoryPartition:
      type: object
      properties:
        name:
          type: string
        aggregation_calculation:
          type: integer
    BrandPartition:
      type: object
      properties:
        name:
          type: string
        aggregation_calculation:
          type: integer
    TagResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            tags:
              items:
               $ref: '#/components/schemas/TagPartition'
            total_aggregation_calculation:
              type: integer
    PlaceResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            places:
              items:
                $ref: '#/components/schemas/PlacePartition'
            total_aggregation_calculation:
              type: integer
    UserResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            users:
              items:
                $ref: '#/components/schemas/UserPartition'
            total_aggregation_calculation:
              type: integer
    BrandResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            brands:
              items:
                $ref: '#/components/schemas/BrandPartition'
            total_aggregation_calculation:
              type: integer
    HardwareStatusResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            stasuses:
              items:
                $ref: '#/components/schemas/Hardware'
            total_aggregation_calculation:
              type: integer
    InsightResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            items:
              items:
                $ref: '#/components/schemas/Insight'
            total_aggregation_calculation:
              type: integer
    ItemResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            stocks:
              items:
                $ref: '#/components/schemas/Stock'
            total_aggregation_calculation:
              type: integer
    SecurityResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            security_events:
              items:
                $ref: '#/components/schemas/Security'
            total_aggregation_calculation:
              type: integer
    InteractionResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            items:
              items:
                $ref: '#/components/schemas/Interaction'
            total_aggregation_calculation:
              type: integer
    CategoryResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            categories:
              items:
                $ref: '#/components/schemas/CategoryPartition'
            total_aggregation_calculation:
              type: integer
    ZoneResponse:
      type: object
      properties:
       data:
          type: object
          properties:
            zones:
              items:
                $ref: '#/components/schemas/ZonePartition'
            total_aggregation_calculation:
              type: integer
    RetailResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            actions:
              items:
                $ref: '#/components/schemas/RetailAction'
            total_aggregation_calculation:
              type: integer
    EventCallBackResponse:
      type: object
      properties:
        user_id: 
          type: string
        event_type:
          type: string
          enum:
            - browsing
            - picked_up
            - walking
            - abandoned
        time_stamp: 
          type: string
        zone:
          type: string
        device_id: 
          type: string
        item_barcode: 
          type: string
tags:
  - name: Token
  - name: Category
    description: Categories are groups of products that meet similar needs. The API allows you to fetch all of the categories paired to your items.
  - name: Tag
    description: Tags represent the features of your items. Tags make it easier to pinpoint items for specific analytic search cases. The API allows you to fetch all the tags described on the Buy Buddy platform.
  - name: Zone
    description: Zones are specific parts of the places that can represent a category, department or a uniquely named space. The API allows you to fetch all the zones paired with places.
  - name: Place
    description: Places represent either a store, a warehouse or a uniquely named location assigned to a merchant. The API allows you to fetch all stored places on the Buy Buddy platform. 
  - name: Item
    description: Items represent the specific goods or services you offer to your customers. The API allows you to fetch all the items recorded in the Buy Buddy platform.
  - name: Brand
    description: Brands are types of products manufactured by particular companies under a particular name. The API allows you to fetch all the brands paired to the items.
  - name: Retail Action
    description: Retail actions represent all of the operations done on items and Buy Buddy devices such as pairing, transfering, silencing, etc. The API allows you to fetch all the actions done on items or devices.
  - name: Hardware Status
    description: Hardware status describes all of the states the Buy Buddy devices go through throughout their lifecycles. These states include both production stage and in store usage stages. The API allows you to fetch all the states of the hardware devices.
  - name: Insight
    description: Insight is gained by analyzing the data and information collected by the Buy Buddy devices to better understand customer behaviour and enables you to make better desicions for certain situations. The API allows you to fetch all business insights collected by Buy Buddy Devices.
  - name: Security Event
    description: Security events represent all of the security states of the Buy Buddy devices. Such as alarmed, missing, active, ect.
  - name: Interaction Event
    description: Interaction events represent all customer interactions made with Buy Buddy devices. The API allows you to fetch all interactions made with the devices and also the detailed information of these interacions.
  - name: Stock
    description: Stock represents your merchandise kept on the premises of a shop or warehouse and available for sale or distribution. You can fetch your stock numbers on the condition that they are paierd with a Buy Buddy device.
  - name: Hardware
    description: Hardware describes all of the devices used in your store. Currently only two types of hardware exists which are the tags and the scanners. The API allows you to fetch all hardware objects assigned to you merchant.
  - name: Webhook
    description: You can subscribe to webhook endpoints via the API to be notified about certain events.
