openapi: 3.0.0
servers:
  - url: 'https://api-legacy.buybuddy.co/api/v1'
info:
  description: |
    This is a sample server Petstore server.
    You can find out more about Swagger at
    [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
    For this sample, you can use the api key `special-key` to test the authorization filters.
    ## Introduction
    ## What is Buy Buddy Platform?
    Buy Buddy is a multi-purpose retail efficiency platform.
    By using the payment device for retailers that are attached to the items in their shops we allow customers to directly pay through their mobile phones and check out of the store.
    
    Hitags are also capable of collecting customer behavior, employee performance, product efficiency, inventory data for retailers and present them through a dashboard in real-time.
    
    Our goal is to enhance the shopping experience while simplifying in-store tasks and also providing in depth customer behavior analysis.
    ## Who is Buy Buddy Platform for?
    Buy Buddy platform is available for any retailers who are in search for a new way of optimizing their in store activities and offering a new and technological way of shopping to their customers. Our devices are currently only compatible with clothing but in the near feature we want to expand our device adaptability to make our services available for a wider range of retailers.
    <!-- ReDoc-Inject: <security-definitions> -->
  version: 1.0.0
  title: Buy Buddy IoT Services
  contact:
    email: emir@buybuddy.co
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /user/sign_in/token : 
    post: 
      tags: 
        - post
      summary: creates a json web token
      operationId: token
      description: By passing in the appropriate options, you create a json web token to access the platfor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                passphrase: 
                  type: integer
                user_id: 
                  type: integer
        description: passphrase and user_id
      responses: 
        201: 
          description: result of the item assignment
          content: 
            application/json: 
              schema: 
                type: object
                properties:
                  token:
                    type: string
                example: 
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo0NiwiZXhwIjoxNTgxNjA4MTAzLCJpYXQiOjE1ODE2MDA5MDN9.eZs3gHqD6BRK0n458-Vgww8fRanlUvdxriLSkqqz9zQ
        400: 
          description: bad input parameter
  /retail_action:
    get:
      tags:
        - retail
      summary: Get retail action
      operationId: merchantRetailAction
      description: |
        You can fetch all item related retail action information for your merchant by passing in your hardware type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/RetailEvent'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: result
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RetailAction'
        '400':
          description: bad input parameter
  /hardware/status:
    get:
      tags:
        - hardware status
      summary: Get hardware status
      operationId: merchantHardwareStatus
      description: |
        You can fetch all hardware status related information for your merchant by passing in your hardware type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/HardwareEvent'
        - $ref: '#/components/parameters/HardwareStatusEvent'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: result
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Hardware'
        '400':
          description: bad input parameter
  /insight:
    get:
      tags:
        - insight
      summary: Get insights
      operationId: merchantInsight
      description: |
        You can fetch all item related business insight calculations for your merchant by passing in your insight type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/InsightType'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: result
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Insight'
        '400':
          description: bad input parameter
  /security:
    get:
      tags:
        - Security
      summary: Get security events
      operationId: merchantSecurity
      description: |
        You can fetch all item related security events for your merchant by passing in your event type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/SecurityEvent'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: result
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Security'
        '400':
          description: bad input parameter
  /interaction:
    get:
      tags:
        - Interaction
      summary: Get item interactions
      operationId: merchantInteraction
      description: |
        You can fetch all item related interactions for your merchant by passing in your event type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/InteractionEvent'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: result
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Interaction'
        '400':
          description: bad input parameter
  /stock:
    get:
      tags:
        - stock
      summary: Get Stock
      operationId: merchantStock
      description: |
        You can fetch all stock related information for items in your merchant by passing in your event type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/StockEvent'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: result
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Stock'
        '400':
          description: bad input parameter
  /hardware:
    get:
      tags:
        - hardware
      summary: Get hardware
      operationId: merchantHardware
      description: |
        You can fetch all hardware related information for your merchant by passing in your hardware type, aggregation functions, time filters, sorting options, limiting options and combination options.
      parameters:
        - $ref: '#/components/parameters/PlaceID'
        - $ref: '#/components/parameters/BrandID'
        - $ref: '#/components/parameters/ZoneID'
        - $ref: '#/components/parameters/CategoryID'
        - $ref: '#/components/parameters/ItemID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TagID'
        - $ref: '#/components/parameters/AggregationFunction'
        - $ref: '#/components/parameters/HardwareEvent'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: result
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Hardware'
        '400':
          description: bad input parameter
components:
  parameters:
    Limit:
      in: query
      name: limit
      description: Specify the number of records to return.
      schema:
        type: integer
    Sort:
      in: query
      name: sort
      schema:
        type: string
        enum: [asc, desc]
      description: >
        Sort order:
            * `asc` - Ascending, from A to Z
            * `desc` - Descending, from Z to A
    AggregationFunction:
      in: query
      name: aggregation_function
      description: The types of aggregate functions you want to use on the result you are fetching. For example passing in sum would bring you the total value of the resource you want to fetch.
      schema:
        type: string
        enum:
          - sum
          - count
          - min
          - max
          - average
          - median
    RetailEvent:
      in: query
      name: event_type
      description: The types of item retail event calculations you want to fetch.
      schema:
        type: string
        enum:
          - silence_alarm
          - pair_item
          - unpair_item
          - find
          - set
          - transger
          - assign
          - ring
    InteractionEvent:
      in: query
      name: event_type
      description: The types of user item engagements you want to fetch.
      schema:
        type: string
        enum:
          - picked_up
          - bounce
          - browsing
          - walking
          - abandoned
    StartDate:
      in: query
      name: start_date
      description: The start date of the time frame you want to search your values inbtween.
      schema:
        type: string
      required: false 
    EndDate:
      in: query
      name: end_date
      description: The end date of the time frame you want to search your values inbetween.
      schema:
        type: string
      required: false 
    PlaceID:
      in: query
      name: place_id
      description: The place id's of the 
      schema:
        type: array
        items:
          type: integer
      required: false 
    CategoryID:
      in: query
      name: category_id
      description: The category id's of 
      schema:
        type: array
        items:
          type: integer
      required: false 
    TagID:
      in: query
      name: tag_id
      schema:
        type: array
        items:
          type: integer
      required: false 
    ItemID:
      in: query
      name: item_id
      schema:
        type: array
        items:
          type: integer
      required: false 
    StoreID:
      in: query
      name: store_id
      schema:
        type: array
        items:
          type: integer
      required: false 
    ZoneID:
      in: query
      name: zone_id
      schema:
        type: array
        items:
          type: integer
      required: false 
    BrandID:
      in: query
      name: brand_id
      schema:
        type: array
        items:
          type: integer
      required: false 
    UserID:
      in: query
      name: user_id
      schema:
        type: array
        items:
          type: integer
      required: false 
    InsightType:
      in: query
      name: event_type
      description: >
        Insight type:
        
            * `conversion` - picked up's divided by sales
            * `cart_sale` - added to cart divided by sales
            * `cart_rate` - picked up's divided by add to cart's
            * `stock_out` - Stock out rate calculation
            * `interaction_rate` - Time interacted with items
            * `stock_out_response` - Reaction time of employees to stock out
            * `alarm_response` - Reaction time of employees to alarms
      schema:
        type: string
        enum:
          - conversion
          - cart_sale
          - cart_rate
          - stock_out
          - interaction_rate
          - stock_out_response
          - alarm_response
    SecurityEvent:
      in: query
      name: event_type
      description: The types of item security events you want to fetch.
      schema:
        type: string
        enum:
          - active
          - deactive
          - alarming
          - alarmed
          - missing
    StockEvent:
      in: query
      name: event_type
      description: The types of item stock events you want to fetch.
      schema:
        type: string
        enum:
          - item
          - stock_out
    HardwareEvent:
      in: query
      name: hardware_type
      description: The types of hardware you want to fetch.
      schema:
        type: string
        enum:
          - tag
          - scanner
    HardwareStatusEvent:
      in: query
      name: hardware_status
      description: The types of hardware states you want to fetch.
      schema:
        type: string
        enum:
          - in_production
          - ready_to_use
          - ready_to_assign
          - assigned
          - in_use
          - maintenance
          - low_batery
          - end_of_life
  schemas:
    Interaction:
      type: object
      properties:
        interaction:
          type: string
        device_identifier:
          type: string
        item:
          type: string
        store:
          type: string
        aggregation_calculation:
          type: integer
    Insight:
      type: object
      properties:
        item:
          type: string
        insight_calculation:
          type: integer
        aggregation_calculation:
          type: integer
    Security:
      type: object
      properties:
        security_state:
          type: string
        device_identifier:
          type: string
        item:
          type: string
        store:
          type: string
        aggregation_calculation:
          type: integer
    Stock:
      type: object
      properties:
        item:
          type: string
        store:
          type: string
        aggregation_calculation:
          type: integer
    RetailAction:
      type: object
      properties:
        aggregation_calculation:
          type: integer
        event_type:
          type: string
        count:
          type: integer
        store:
          type: string
    Hardware:
      type: object
      properties:
        aggregation_calculation:
          type: integer
        store:
          type: string
        device_identifier:
          type: string
        hardware_type:
          type: string
